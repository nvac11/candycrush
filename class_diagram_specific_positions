// Class candy crush
digraph {
	graph [rankdir=BT]
	app [label="{ app | State gamestate\lsf::RenderWindow * window\lGridDisplay gridDisplay\lEventController eventController\lDisplayMenu menuDisplay\lGameData gameData\lint n\l | app(sf::RenderWindow * window , int n )\l~app()\lvoid start(State gs)\lvoid playmenu()\lbool playgame()\lvoid load(std::string filename)\lvoid save(std::string filename)\lvoid flushGameData()\l }" shape=record]
	DisplayMenu [label="{ DisplayMenu | sf::Font font\l | DisplayMenu()\l~DisplayMenu()\lMenuOption displayMenu(sf::RenderWindow& window)\lvoid displayScoreAndGameOver(sf::RenderWindow& window, int score, bool gameOver)\l }" shape=record]
	GridDisplay [label="{ GridDisplay | std::vector\<sf::RectangleShape\> rectangles\lstd::vector\<std::vector\<int\>\> gInner\lint n\lsf::Font font\lsf::Text scoreText\l | GridDisplay(int n )\lvoid processRectClicked(sf::Vector2f mousePos, std::pair\<std::pair\<int, int\>, std::pair\<int, int\>\>& clickedPairs)\lvoid displayGrid(sf::RenderWindow& window) const\lvoid updateRectGrid(std::vector\<std::vector\<int\>\> g)\lvoid updateScore(int score, int remainingmove)\lsf::Color intToSFMLColor(int colorCode)\l }" shape=record]
	EventController [label="{ EventController | GridDisplay * gdisplay\lstd::pair\<std::pair\<int, int\>, std::pair\<int, int\>\> clickedPairs\l | EventController(GridDisplay *g)\lbool handleEvent(sf::RenderWindow& window)\lstd::pair\<std::pair\<int, int\>, std::pair\<int, int\>\>& getClickedPairs()\lbool hasTwoClicked() const\lvoid resetClicked()\lbool noRectClicked() const\l }" shape=record]
	"(Struct) GameData" [label="{ (Struct) GameData | std::vector\<std::vector\<int\>\> g\lint score\lint movesremaining\l | \l }" shape=record]
	Grid [label="{ Grid | \l | Grid()\l~Grid()\lbool isValid(vector\<vector\<int\>\> g, pair\<int, int\> c1, pair\<int, int\> c2)\lvector\<vector\<int\>\> destructGrid(vector\<vector\<int\>\> g , int & score)\lvector\<vector\<int\>\> fallGrid(vector\<vector\<int\>\> g)\lvector\<vector\<int\>\> fillGrid(vector\<vector\<int\>\> g)\lbool canBeDestruct(vector\<vector\<int\>\> g)\lbool isSolvable(vector\<vector\<int\>\> g)\l }" shape=record]
	DisplayMenu -> app [arrowhead=diamond]
	GridDisplay -> app [arrowhead=diamond]
	EventController -> app [arrowhead=diamond]
	"(Struct) GameData" -> app [arrowhead=diamond]
	GridDisplay -> EventController [arrowhead=odiamond]
	app -> Grid [arrowhead=onormal]
}
